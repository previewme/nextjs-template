name: Application Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APPLICATION_VERSION: 0.1.${{ github.run_number }}
  TF_VAR_application_name: ${{ github.event.repository.name }}
  TF_VAR_operations_assume_role: ${{ secrets.OPERATIONS_ROLE_TO_ASSUME }}

jobs:
  setup-ecr:
    name: Setup ECR Repository
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/ecr
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Get ECR Repository URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: ecr-repository-url
        run: terraform output -no-color -raw repository_url

      - name: Write ECR repository URL to artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: ecr-artifact
        run: echo "${{ steps.ecr-repository-url.outputs.stdout }}" > ${{ github.workspace }}/ecr-url.txt

      - name: Upload ecr repository url
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ecr
          path: ${{ github.workspace }}/ecr-url.txt
          if-no-files-found: error

  test:
    name: Run Tests and Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Upload file report files as an artifact
        if: success()
        uses: actions/upload-artifact@v2.2.4
        with:
          name: reports
          path: reports/
          retention-days: 1

  sonarcloud:
    needs:
      - test
    name: Quality Gate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - name: Download a reports artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: reports
          path: reports

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  slack-workflow-status:
    if: always()
    name: Post Workflow Status To Slack
    runs-on: ubuntu-latest
    needs:
      - setup-ecr
      - test
      - sonarcloud
    steps:
      - name: Workflow Conclusion Action
        uses: technote-space/workflow-conclusion-action@v2.2.0

      - name: Slack Notification
        uses: 8398a7/action-slack@v3.10.0
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          author_name: GitHub Action
          fields: repo,commit,message,author,action,workflow
          mention: channel
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
