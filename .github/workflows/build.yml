name: Application Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APPLICATION_VERSION: 0.1.${{ github.run_number }}
  TF_IN_AUTOMATION: true
  TF_VAR_application_name: ${{ github.event.repository.name }}
  TF_VAR_operations_assume_role: ${{ secrets.OPERATIONS_ROLE_TO_ASSUME }}

jobs:
  setup-ecr:
    name: Setup ECR Repository
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/ecr
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Get ECR Repository URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: ecr-repository-url
        run: terraform output -no-color -raw repository_url

      - name: Write ECR repository URL to artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: ecr-artifact
        run: echo "${{ steps.ecr-repository-url.outputs.stdout }}" > ${{ github.workspace }}/ecr-url.txt

      - name: Upload ecr repository url
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ecr
          path: ${{ github.workspace }}/ecr-url.txt
          if-no-files-found: error

  test:
    name: Run Tests and Checks
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test

    steps:
      - uses: actions/checkout@v2.3.5

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Upload file report files as an artifact
        if: success()
        uses: actions/upload-artifact@v2.2.4
        with:
          name: reports
          path: reports/
          retention-days: 1

  build:
    needs:
      - setup-ecr
      - test
    name: Build artefacts and container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Download all artifacts
        uses: actions/download-artifact@v2.0.10

      - name: Read ECR file
        id: ecr
        run: echo ::set-output name=url::$(cat ${{ github.workspace }}/ecr/ecr-url.txt)

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build docker container
        run: docker build . -t ${{ steps.ecr.outputs.url }}:${{ env.APPLICATION_VERSION }}

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1.5.11
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OPERATIONS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 900

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3

      - name: Push docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: docker push ${{ steps.ecr.outputs.url }}:${{ env.APPLICATION_VERSION }}

  sonarcloud:
    needs:
      - test
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - name: Download a reports artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: reports
          path: reports

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-development:
    needs:
      - setup-ecr
      - build
    name: "Deploy development infrastructure and ECS service"
    runs-on: ubuntu-latest
    env:
      TF_LOG: "DEBUG"
      TF_WORKSPACE: ${{ github.event.repository.name }}-development
    defaults:
      run:
        working-directory: deployment/service
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2.0.10

      - name: Read ECR file
        id: ecr
        run: echo ::set-output name=url::$(cat ${{ github.workspace }}/ecr/ecr-url.txt)
        working-directory: ${{ github.workspace }}

      - name: Checkout
        uses: actions/checkout@v2.3.5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Setup Terraform variables
        id: vars
        run: |-
          echo "TF_VAR_container_image=${{ steps.ecr.outputs.url }}:${{ env.APPLICATION_VERSION }}" >> $GITHUB_ENV

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Get terraform outputs
        id: terraform
        run: |
          echo "::set-output name=service-name::$(terraform-bin output -no-color -raw service_name)"
          echo "::set-output name=ecs-cluster-name::$(terraform-bin output -no-color -raw ecs_cluster_name)"
          echo "::set-output name=codedeploy-application-name::$(terraform-bin output -no-color -raw codedeploy_application_name)"
          echo "::set-output name=codedeploy-group-name::$(terraform-bin output -no-color -raw codedeploy_deployment_group)"
          echo "::set-output name=task-definition::$(terraform-bin output -no-color -raw task_definition_file)"
          echo "::set-output name=appspec-file::$(terraform-bin output -no-color -raw appspec_file)"

      - name: Write CodeDeploy files
        run: |
          echo '${{ steps.terraform.outputs.task-definition }}' > ${{ github.workspace }}/task-definition.json
          echo '${{ steps.terraform.outputs.appspec-file }}' > ${{ github.workspace }}/appspec.json
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.5.11
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.DEVELOPMENT_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 1200

      - name: Deploy to Development ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.7
        with:
          task-definition: task-definition.json
          service: ${{ steps.terraform.outputs.service-name }}
          cluster: ${{ steps.terraform.outputs.ecs-cluster-name }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: ${{ steps.terraform.outputs.codedeploy-application-name }}
          codedeploy-deployment-group: ${{ steps.terraform.outputs.codedeploy-group-name }}

#  deploy-production:
#    needs:
#      - deploy-development
#    name: "Deploy production infrastructure and ECS service"
#    runs-on: ubuntu-latest
#    env:
#      TF_WORKSPACE: ${{ github.event.repository.name }}-production
#    defaults:
#      run:
#        working-directory: deployment/service
#    if: ${{ false }}
#
#    steps:
#      - name: Download all artifacts
#        uses: actions/download-artifact@v2.0.10
#
#      - name: Read ECR file
#        id: ecr
#        run: echo ::set-output name=url::$(cat ${{ github.workspace }}/ecr/ecr-url.txt)
#        working-directory: ${{ github.workspace }}
#
#      - name: Checkout
#        uses: actions/checkout@v2.3.5
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1.2.1
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check
#
#      - name: Terraform Init
#        id: init
#        run: terraform init -input=false
#
#      - name: Setup Terraform variables
#        id: vars
#        run: |-
#          echo "TF_VAR_container_image=${{ steps.ecr.outputs.url }}:${{ env.APPLICATION_VERSION }}" >> $GITHUB_ENV
#
#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true
#
#      - uses: actions/github-script@v5
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
#            <details><summary>Show Plan</summary>
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#            </details>
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#            github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
#
#      - name: Get terraform outputs
#        id: terraform
#        run: |
#          echo "::set-output name=service-name::$(terraform-bin output -no-color -raw service_name)"
#          echo "::set-output name=ecs-cluster-name::$(terraform-bin output -no-color -raw ecs_cluster_name)"
#          echo "::set-output name=codedeploy-application-name::$(terraform-bin output -no-color -raw codedeploy_application_name)"
#          echo "::set-output name=codedeploy-group-name::$(terraform-bin output -no-color -raw codedeploy_deployment_group)"
#          echo "::set-output name=task-definition::$(terraform-bin output -no-color -raw task_definition_file)"
#          echo "::set-output name=appspec-file::$(terraform-bin output -no-color -raw appspec_file)"
#
#      - name: Write CodeDeploy files
#        run: |
#          echo '${{ steps.terraform.outputs.task-definition }}' > ${{ github.workspace }}/task-definition.json
#          echo '${{ steps.terraform.outputs.appspec-file }}' > ${{ github.workspace }}/appspec.json
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1.5.11
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#          role-to-assume: ${{ secrets.DEVELOPMENT_ROLE_TO_ASSUME }}
#          role-skip-session-tagging: true
#          role-duration-seconds: 1200
#
#      - name: Deploy to Development ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.7
#        with:
#          task-definition: task-definition.json
#          service: ${{ steps.terraform.outputs.service-name }}
#          cluster: ${{ steps.terraform.outputs.ecs-cluster-name }}
#          wait-for-service-stability: true
#          codedeploy-appspec: appspec.json
#          codedeploy-application: ${{ steps.terraform.outputs.codedeploy-application-name }}
#          codedeploy-deployment-group: ${{ steps.terraform.outputs.codedeploy-group-name }}
#
#  slack-workflow-status:
#    if: always()
#    name: Post Workflow Status To Slack
#    runs-on: ubuntu-latest
#    needs:
#      - setup-ecr
#      - test
#      - build
#      - sonarcloud
#      - deploy-development
#    steps:
#      - name: Workflow Conclusion Action
#        uses: technote-space/workflow-conclusion-action@v2.2.0
#
#      - name: Slack Notification
#        uses: 8398a7/action-slack@v3.10.0
#        with:
#          status: ${{ env.WORKFLOW_CONCLUSION }}
#          author_name: GitHub Action
#          fields: repo,commit,message,author,action,workflow
#          mention: channel
#          if_mention: failure,cancelled
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
